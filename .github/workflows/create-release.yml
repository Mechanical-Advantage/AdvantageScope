name: Create Release

on:
  release:
    types: [published]

jobs:
  format:
    name: Check Formatting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18.x"
          cache: "npm"
      - name: Install Node.js dependencies
        run: npm install
      - name: Check formatting
        run: npm run check-format

  build:
    strategy:
      matrix:
        host:
          - {
              os: macos-latest,
              shortName: "mac",
              displayName: "macOS",
              artifactExt: "dmg",
              artifactType: "application/octet-stream"
            }
          - {
              os: ubuntu-latest,
              shortName: "linux",
              displayName: "Linux",
              artifactExt: "zip",
              artifactType: "application/zip"
            }
          - {
              os: windows-latest,
              shortName: "win",
              displayName: "Windows",
              artifactExt: "exe",
              artifactType: "application/octet-stream"
            }
        arch: ["x64", "arm64"]

    name: Build for ${{ matrix.host.displayName }} (${{ matrix.arch }})
    runs-on: ${{ matrix.host.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Get release info
        id: get_release_info
        uses: bruceadams/get-release@v1.2.3
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18.x"
          cache: "npm"
      - name: Install Node.js dependencies
        run: npm install
      - name: Install Linux dependencies
        if: matrix.host.os == 'ubuntu-latest'
        run: sudo apt-get update; sudo apt-get install --no-install-recommends -y libarchive-tools
      - name: Prepare macOS certificate
        if: matrix.host.os == 'macos-latest'
        run: |
          echo "CSC_LINK=${{ secrets.MACOS_CERTIFICATE }}" >> $GITHUB_ENV
          echo "CSC_KEY_PASSWORD=${{ secrets.MACOS_CERTIFICATE_PWD }}" >> $GITHUB_ENV
          echo "APPLE_ID=${{ secrets.MACOS_APPLE_ID }}" >> $GITHUB_ENV
          echo "APPLE_ID_PWD=${{ secrets.MACOS_APPLE_ID_PWD }}" >> $GITHUB_ENV
          echo "APPLE_ID_TEAM=${{ secrets.MACOS_APPLE_ID_TEAM }}" >> $GITHUB_ENV
      - name: Build app
        run: npm run build -- --${{ matrix.arch }} --publish never
        env:
          NODE_OPTIONS: --max-old-space-size=4096
      - name: Prepare macOS artifact
        if: matrix.host.os == 'macos-latest'
        run: |
          mv dist/AdvantageScope-*.dmg artifact
      - name: Prepare Linux artifact
        if: matrix.host.os == 'ubuntu-latest'
        run: |
          cd dist
          zip ../artifact.zip ./advantagescope*
          mv ../artifact.zip ../artifact
      - name: Prepare Windows artifact
        if: matrix.host.os == 'windows-latest'
        run: |
          Move-Item -Path "dist\AdvantageScope Setup *.exe" -Destination "artifact"
      - name: Upload artifacts
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: artifact
          asset_name: advantagescope-${{ matrix.host.shortName }}-${{ matrix.arch }}-${{ steps.get_release_info.outputs.tag_name }}.${{ matrix.host.artifactExt }}
          asset_content_type: ${{ matrix.host.artifactType }}
